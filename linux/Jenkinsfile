pipeline {
    agent any
    tools {
        maven "maven"
    }
    stages {
        stage('Check') {
            steps {
                checkout scm
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                script {
                    def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                    def services = [
                        'config-server', 'eureka-server', 'gateway-server',
                        'ms-customer', 'ms-executive', 'ms-loan',
                        'ms-request', 'ms-simulation', 'frontend-ms'
                    ]
                    services.each { service ->
                        dir(service) {
                            dependencyCheck(
                                additionalArguments: '--scan . --format HTML --format JSON',
                                nvdCredentialsId: 'token-nvd-api-key',
                                odcInstallation: 'owasp-dc-devsecops-pep3'
                            )
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                    def services = [
                        'config-server', 'eureka-server', 'gateway-server',
                        'ms-customer', 'ms-executive', 'ms-loan',
                        'ms-request', 'ms-simulation', 'frontend-ms'
                    ]
                    def buildTasks = services.collectEntries { service ->
                        ["${service}": {
                            dir(service) {
                                if (service == 'frontend-ms') {
                                    runCommand("npm install")
                                    runCommand("npm run build")
                                } else {
                                    runCommand("mvn clean install -DskipTests")
                                }
                            }
                        }]
                    }
                    parallel buildTasks
                }
            }
        }

        stage('Unit Testing') {
            steps {
                script {
                    def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                    def services = [
                        'ms-customer', 'ms-executive',
                        'ms-loan', 'ms-request', 'ms-simulation'
                    ]
                    def testTasks = services.collectEntries { service ->
                        ["${service}": {
                            dir(service) {
                                runCommand("mvn test jacoco:report")
                            }
                        }]
                    }
                    parallel testTasks
                }
            }
        }


        stage('PMD Analysis') {
            steps {
                script {
                    def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                    def services = [
                        'config-server', 'eureka-server', 'gateway-server',
                        'ms-customer', 'ms-executive', 'ms-loan',
                        'ms-request', 'ms-simulation'
                    ]

            // Paso 1: paralelizar ejecuciÃ³n de mvn pmd:pmd
                    def pmdTasks = services.collectEntries { service ->
                        ["${service}": {
                            dir(service) {
                                runCommand("mvn pmd:pmd")
                            }
                        }]
                    }
                    parallel pmdTasks

            // Paso 2: ejecutar python secuencialmente para cada servicio
                    services.each { service ->
                        dir(service) {
                            runCommand("python ${env.WORKSPACE}\\PMD_TO_SQ.py")
                        }
                    }
                }
            }
        }


        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${env.SONARQUBE_ENV}") {
                    script {
                        def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                        def services = [
                            'config-server', 'eureka-server', 'gateway-server',
                            'ms-customer', 'ms-executive', 'ms-loan',
                            'ms-request', 'ms-simulation'
                        ]
                        def sonarTasks = services.collectEntries { service ->
                            ["${service}": {
                                dir(service) {
                                    runCommand("""
                                        mvn sonar:sonar ^
                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml ^
                                        -Dsonar.coverage.inclusions=**/service/*.java ^
                                        -Dsonar.exclusions=**/controller/** ^
                                        -Dsonar.externalIssuesReportPaths=target/sonar-pmd-report.json,${WORKSPACE}/dependency-check-report.html,${WORKSPACE}/dependency-check-report.json
                                    """.stripIndent())
                                }
                            }]
                        }
                        parallel sonarTasks
                    }
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                    def services = [
                        'config-server', 'eureka-server', 'gateway-server',
                        'ms-customer', 'ms-executive', 'ms-loan',
                        'ms-request', 'ms-simulation', 'frontend-ms'
                    ]
                    services.each { service ->
                        dir(service) {
                            runCommand("docker build -t ${env.DOCKER_REGISTRY}/${service}:latest .")
                            withCredentials([usernamePassword(credentialsId: "${env.DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                runCommand("docker login -u ${env.DOCKER_USER} -p ${env.DOCKER_PASS}")
                                runCommand("docker push ${env.DOCKER_REGISTRY}/${service}:latest")
                            }
                        }
                    }
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                script {
                    def runCommand = { cmd -> isUnix() ? sh(cmd) : bat(cmd) }
                    runCommand("docker-compose down || exit 0")
                    runCommand("docker-compose up -d")
                }
            }
        }
    }

    post {
        failure {
            echo 'Error in pipeline.'
        }
        success {
            echo 'Pipeline completed.'
        }
    }
}
